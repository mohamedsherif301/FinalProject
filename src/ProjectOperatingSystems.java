/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
import java.awt.Color;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ArrayList;
import java.util.List;
import java.util.Arrays;
import javax.swing.JOptionPane;
import javax.swing.Timer;
import javax.swing.table.DefaultTableModel;
/**
 *
 * @author Lenovo
 */
public class ProjectOperatingSystems extends javax.swing.JFrame {
    DefaultTableModel model ;
       int rowCount = 0;
       
    
    

    /**
     * Creates new form ProjectOperatingSystems
     */
    public ProjectOperatingSystems() {
        initComponents();
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jPanel4 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        processId = new javax.swing.JTextField();
        cpuTime = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        AlgorithmsList = new javax.swing.JComboBox<>();
        jButton1 = new javax.swing.JButton();
        clear = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        Table = new javax.swing.JTable();
        jLabel5 = new javax.swing.JLabel();
        stateofProcess = new javax.swing.JTextField();
        OrderProcess = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(255, 255, 51));

        jPanel1.setBackground(new java.awt.Color(51, 51, 51));
        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jPanel2.setBackground(new java.awt.Color(153, 153, 153));
        jPanel2.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jLabel1.setFont(new java.awt.Font("Segoe UI Black", 1, 24)); // NOI18N
        jLabel1.setText("CPU Scheduler :-");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 314, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(jLabel1)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        jLabel4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/image.jpg"))); // NOI18N

        jPanel4.setBackground(new java.awt.Color(153, 153, 153));
        jPanel4.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jLabel2.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel2.setText("Num OF Processes :-");

        jLabel3.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel3.setText("Burst Time :-");

        processId.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        processId.setText("1");
        processId.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                processIdActionPerformed(evt);
            }
        });

        cpuTime.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        cpuTime.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cpuTimeActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(processId, javax.swing.GroupLayout.DEFAULT_SIZE, 298, Short.MAX_VALUE)
                    .addComponent(cpuTime))
                .addGap(15, 15, 15))
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGap(16, 16, 16)
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 264, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 225, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(37, 37, 37)
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(processId, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(55, 55, 55)
                .addComponent(jLabel3)
                .addGap(18, 18, 18)
                .addComponent(cpuTime, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(77, Short.MAX_VALUE))
        );

        jLabel6.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel6.setText("Select Algorithm :-");

        AlgorithmsList.setBackground(new java.awt.Color(204, 204, 204));
        AlgorithmsList.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        AlgorithmsList.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "FCFS", "SJF", "Priority Scheduling", "Round Robin" }));
        AlgorithmsList.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        AlgorithmsList.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AlgorithmsListActionPerformed(evt);
            }
        });

        jButton1.setBackground(java.awt.Color.orange);
        jButton1.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jButton1.setText("Add Process");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        clear.setBackground(java.awt.Color.orange);
        clear.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        clear.setText("Default.PS");
        clear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearActionPerformed(evt);
            }
        });

        jButton4.setBackground(java.awt.Color.orange);
        jButton4.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jButton4.setText("Delete :-");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jButton2.setBackground(java.awt.Color.orange);
        jButton2.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jButton2.setText("Run Algorithm");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        Table.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        Table.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        Table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "No.Process", "Burst.Time", "Process priority", "Time quantum"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        Table.getTableHeader().setReorderingAllowed(false);
        jScrollPane2.setViewportView(Table);

        jLabel5.setFont(new java.awt.Font("Segoe UI", 1, 36)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(0, 102, 102));
        jLabel5.setText("Status");

        stateofProcess.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        stateofProcess.setForeground(new java.awt.Color(102, 102, 102));

        OrderProcess.setFont(new java.awt.Font("SansSerif", 1, 18)); // NOI18N
        OrderProcess.setForeground(new java.awt.Color(102, 102, 102));

        jLabel7.setFont(new java.awt.Font("Segoe UI", 1, 36)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(0, 102, 102));
        jLabel7.setText("Order Processes");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jLabel4)
                .addGap(18, 18, 18)
                .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 241, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(232, 232, 232))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(17, 17, 17)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 512, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 312, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(OrderProcess, javax.swing.GroupLayout.PREFERRED_SIZE, 500, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(55, 55, 55)
                        .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(48, 48, 48)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(AlgorithmsList, javax.swing.GroupLayout.PREFERRED_SIZE, 219, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(stateofProcess, javax.swing.GroupLayout.PREFERRED_SIZE, 181, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 155, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jButton1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jButton2))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(clear, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(63, 63, 63)
                                .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(80, 80, 80))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(26, 26, 26))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(4, 4, 4)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(AlgorithmsList, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(49, 49, 49)
                        .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButton1)
                            .addComponent(jButton2)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(7, 7, 7)
                        .addComponent(jLabel7)
                        .addGap(18, 18, 18)
                        .addComponent(OrderProcess, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(stateofProcess, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel5))
                        .addGap(27, 27, 27)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 210, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(clear)
                    .addComponent(jButton4))
                .addContainerGap(23, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void AlgorithmsListActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AlgorithmsListActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_AlgorithmsListActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
                          

      model = (DefaultTableModel) Table.getModel();
        Add_To_Table();
        ClearForms();
        IncreamentNumberProcess();
        changeStatusProcess("Ready");
        

 
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
           changeStatusProcess("Running");
           rowCount = model.getRowCount();
           int  burstTimes[] = new int[rowCount];
           int  waitingTimes[] = new int[rowCount];
           int[] BackupburstTime = new int[rowCount];
           int turnAroundTimes[] = new int[rowCount];
           int NumberofProcesses[] = new int[rowCount];
           OrderProcess.setText("");
           
    if(AlgorithmsList.getSelectedItem().equals("FCFS")){
    
//    Alogrithm frist Come frist Serve 
      List<Object[]> tableDate = new ArrayList<>();
      
            for (int i = 0; i < rowCount; i++) {
                          Object[] row = new Object[4];
                          row[0] = model.getValueAt(i, 0); // ID
                          row[1] = Integer.parseInt(model.getValueAt(i, 1).toString()); // Burst Time
                          row[2] = 0; // Waiting Time (تعيين مبدئيًا بـ 0)
                          row[3] = 0; // Turnaround Time (تعيين مبدئيًا بـ 0)
                    tableDate.add(row);
                   }
            for (int i = 0; i < rowCount; i++) {
               
                         burstTimes[i] = Integer.parseInt(model.getValueAt(i, 1).toString());
          
                      }
            
             waitingTimes[0] = 0;
            for (int i = 1; i < rowCount; i++) {
                waitingTimes[i] = waitingTimes[i - 1] + burstTimes[i - 1];
                       
                }
            
               for (int i = 0; i < rowCount; i++) {
                turnAroundTimes[i] = waitingTimes[i] + burstTimes[i];
            }
//               if number of column is Status Default mean is Equal "4" col
                 if(model.getColumnCount() == 4){
                    Add_Two_ColumnWT();

                 }
             OrderProcessInFiled(tableDate);
             
                  setValueinTableWaitingTime(waitingTimes);
                  setValueinTableTrunAroundTime(turnAroundTimes);
                  
              ShowWaitingAndTurnAround_Time("FCFS");
              
             
            
    }
    else if(AlgorithmsList.getSelectedItem().equals("SJF")){
         List<Object[]> tableData = new ArrayList<>();

    // **استخراج البيانات من الجدول**
                for (int i = 0; i < rowCount; i++) {
                    Object[] row = new Object[6];
                    row[0] = model.getValueAt(i, 0); // ID

                    row[1] = Integer.parseInt(model.getValueAt(i, 1).toString()); // Burst Time
                    row[2] = 0; // Proprity Process (تعيين مبدئيًا بـ 0)
                    row[3] = 0; // Quntam Time (تعيين مبدئيًا بـ 0)
                    row[4] = 0; // WaitTime 
                    row[5] = 0;// TurnAround Time
                    tableData.add(row);
                }

//                Sorting Table Based on Burst Time 
         tableData.sort((a, b) -> Integer.compare((int) a[1], (int) b[1]));
        OrderProcessInFiled(tableData);
//         Column (Waiting Time , TerunAround Time)
            if(model.getColumnCount() == 4){
                    Add_Two_ColumnWT();

                 }
         
         
          int currentTime = 0; // الوقت الحالي
    for (int i = 0; i < tableData.size(); i++) {
        Object[] row = tableData.get(i);
        
        // حساب Waiting Time
        int burstTime = (int) row[1];
        row[4] = currentTime; // Waiting Time = الوقت الحالي قبل بدء العملية

        // حساب Turnaround Time
        row[5] = (int) row[4] + burstTime; // Turnaround Time = Waiting Time + Burst Time

        // تحديث الوقت الحالي
        currentTime += burstTime;
    }
    
           AssignValueLists(tableData,waitingTimes,turnAroundTimes);
    
          UpdateModel(tableData);
         ShowWaitingAndTurnAround_Time("FJS");
         

    }
    else if(AlgorithmsList.getSelectedItem().equals("Priority Scheduling")){
        //    Alogrithm  Priority Process 
     

        AddinTwoCloumPQ(2,"Priority");
        
        if(model.getColumnCount() == 4){
                    Add_Two_ColumnWT();
        }
           List<Object[]> tableData = new ArrayList<>();
         for (int i = 0; i < rowCount; i++) {
                    Object[] row = new Object[6];
                    row[0] = model.getValueAt(i, 0); // ID

                    row[1] = Integer.parseInt(model.getValueAt(i, 1).toString()); // Burst Time
                    row[2] = Integer.parseInt(model.getValueAt(i, 2).toString()); // Proprity Process (تعيين مبدئيًا بـ 0)
                    row[3] = 0; // Quntam Time (تعيين مبدئيًا بـ 0)
                    row[4] = 0; // WaitTime 
                    row[5] = 0;// TurnAround Time
                    tableData.add(row);
                }

//                Sorting Table Based on Priority Process
         tableData.sort((a, b) -> Integer.compare((int) a[2], (int) b[2]));
                 OrderProcessInFiled(tableData);

         
           int currentTime = 0; // الوقت الحالي
    for (int i = 0; i < tableData.size(); i++) {
        Object[] row = tableData.get(i);

        // حساب Waiting Time
        int burstTime = (int) row[1];
        row[4] = currentTime; // Waiting Time = الوقت الحالي قبل بدء العملية

        // حساب Turnaround Time
        row[5] = (int) row[4] + burstTime; // Turnaround Time = Waiting Time + Burst Time

        // تحديث الوقت الحالي
        currentTime += burstTime;
    }
    
    UpdateModel(tableData);
    
    
    ShowWaitingAndTurnAround_Time("PS");

    } 
    else if (AlgorithmsList.getSelectedItem().equals("Round Robin")) {
    rowCount = model.getRowCount();
    if(model.getColumnCount() == 4){
                    Add_Two_ColumnWT();
    }
   
    for(int i=0 ; i< rowCount ;i++){
        int currentTimeBust = Integer.parseInt(model.getValueAt(i, 1).toString()) ;
        BackupburstTime[i] = currentTimeBust;
        
    }
    // **الحصول على Quantum Time مرة واحدة فقط**
    String quantumInput = JOptionPane.showInputDialog(this, 
        "Input Quantum Time for all processes:", 
        "Quantum Time Input", 
        JOptionPane.QUESTION_MESSAGE);

    // التحقق من صحة الإدخال
    if (quantumInput == null || quantumInput.isEmpty()) {
        JOptionPane.showMessageDialog(this, "Quantum Time is required!", "Error", JOptionPane.ERROR_MESSAGE);
        return;
    }

    int quantumTime;
    try {
        quantumTime = Integer.parseInt(quantumInput);
        if (quantumTime <= 0) {
            throw new NumberFormatException("Quantum Time must be positive.");
        }
    } catch (NumberFormatException e) {
        JOptionPane.showMessageDialog(this, "Please enter a valid positive integer for Quantum Time.", "Error", JOptionPane.ERROR_MESSAGE);
        return;
    }

    // **استخراج بيانات الجدول**
    List<Object[]> tableData = new ArrayList<>();
    for (int i = 0; i < rowCount; i++) {
        Object[] row = new Object[6];
        row[0] = model.getValueAt(i, 0); // ID
        row[1] = Integer.parseInt(model.getValueAt(i, 1).toString()); // Burst Time
        row[2] = 0; // Priority Process 
        row[3] = Integer.parseInt(model.getValueAt(i, 3).toString()); // Quantam Time
        row[4] = 0;
        row[5]= 0;
        
        tableData.add(row);
    }

    // **تنفيذ خوارزمية Round Robin**
    int currentTime = 0;
    boolean allProcessesComplete;
    do {
        allProcessesComplete = true;

        for (Object[] process : tableData) {
            int remainingTime = (int) process[1]; // based on Burst Time

            if (remainingTime > 0) {
                allProcessesComplete = false;

                if (remainingTime > quantumTime) {
                   

                    process[1] = remainingTime - quantumTime; // تحديث Remaining Time
                    DelaybyDelay("S="+currentTime+process[0].toString()+"(+"+process[1].toString()+")||-");// Delay Order Processes
                    currentTime += quantumTime;

                } else {
                    process[1] = 0; // العملية انتهت

                    DelaybyDelay("S="+currentTime+process[0].toString()+"(F)|-");
                    currentTime += remainingTime;
                    process[5] = currentTime; // Turnaround Time
                    process[4] = (int) process[5] - ((int) process[1] + remainingTime); // Waiting Time


                }
            }
        }
    } while (!allProcessesComplete);

    // **إعادة تعبئة الجدول بالقيم المحسوبة**
    for (int i = 0; i < tableData.size(); i++) {
        Object[] process = tableData.get(i);
        model.setValueAt(process[0], i, 0); // ID 
        model.setValueAt( BackupburstTime[i], i, 1); // Burst Time
        model.setValueAt((int) process[2], i, 2); // Waiting Time
        model.setValueAt(quantumTime, i, 3); // Turnaround Time
        model.setValueAt((int) process[4], i, 4); // Waiting Time
        model.setValueAt((int) process[5], i,5);// TrunAround Time
        
    }
    

    // **حساب المتوسطات**
    double totalWaitingTime = 0, totalTurnAroundTime = 0;
    for (int i = 0; i < rowCount; i++) {
        totalWaitingTime += Integer.parseInt(model.getValueAt(i, 4).toString());
        totalTurnAroundTime += Integer.parseInt(model.getValueAt(i, 5).toString());
    }

    double averageWaitingTime = totalWaitingTime / rowCount;
    double averageTurnAroundTime = totalTurnAroundTime / rowCount;

    // **عرض النتائج**
    JOptionPane.showMessageDialog(this, 
        "Round Robin (RR) with Quantum Time " + quantumTime + ":\n " +
        "Average Waiting Time: " + averageWaitingTime + "\n" +
        "Average Turnaround Time: " + averageTurnAroundTime, 
        "Results", JOptionPane.INFORMATION_MESSAGE);
}
     
             
                    
     
                
                           
    }//GEN-LAST:event_jButton2ActionPerformed
      
    
    
    
    
    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
      
       DeleteRow();
        
    }//GEN-LAST:event_jButton4ActionPerformed

    private void clearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearActionPerformed
                
            int cpuTime[] = {5, 6, 1, 4};
            model = (DefaultTableModel) Table.getModel();

            // تحديث الجدول بالبيانات
            for (int i = 0; i < cpuTime.length; i++) {
              model.addRow(new Object[]{"P"+(i+1),cpuTime[i],0,0});
            }
            changeStatusProcess("Ready");
    }//GEN-LAST:event_clearActionPerformed

    private void processIdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_processIdActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_processIdActionPerformed

    private void cpuTimeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cpuTimeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cpuTimeActionPerformed
//    Clear value of  TextField 
    private void ClearForms(){

         cpuTime.setText("");
         
}
    private void OrderProcessInFiled(List<Object[]> tableData) {
    int delay = 1000; // تأخير مبدئي (1 ثانية)
    for (int i = 0; i < rowCount; i++) {
        Object[] row = tableData.get(i);
        String process = row[0].toString() + "\t";

        // إنشاء مؤقت جديد بوقت التأخير المناسب
        Timer timer = new Timer(delay, new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                delayOrderProcess(process);
                ((Timer) e.getSource()).stop(); // إيقاف المؤقت بعد التنفيذ
            }
        });

        timer.start();
        delay += 1000; // زيادة التأخير بمقدار ثانية واحدة لكل عملية
    }
}
    private void DelaybyDelay(String process){
            int delay = 1000; // تأخير مبدئي (1 ثانية)


        // إنشاء مؤقت جديد بوقت التأخير المناسب
        Timer timer = new Timer(delay, new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                delayOrderProcess(process);
                ((Timer) e.getSource()).stop(); // إيقاف المؤقت بعد التنفيذ
            }
        });

        timer.start();
        delay += 1000;
    }

    private void changeStatusProcess(String Status){
        stateofProcess.setText(Status);
        if(Status == "Ready"){
                     stateofProcess.setBackground(Color.red);

        }
        else if(Status == "Running") {
                     stateofProcess.setBackground(Color.blue);

        }
         
    }
//    Check CPU Time Is vaild Or Not 
    private boolean checkCPUTime(){
    if(cpuTime.getText() == "" ){
        return false;
         }
    else {
        return true ;
        }
 }
//    Add To Table 
private  void Add_To_Table(){
  
  model.addRow(new Object[]{"P"+processId.getText(),cpuTime.getText(),0,0});
} 
//    Check Process Number Is vaild Or Not 
private boolean checkProcessNumber(){
    if(processId.getText() == "" ){
        return false ;
        
    }
    else {
        return true ;
     
    }
}

private void DeleteRow(){
     int row = Table.getSelectedRow();
         model.removeRow(row);
}

private void delayOrderProcess(String Process) {
    Timer timer;
    timer = new Timer(2000, new ActionListener() { // المؤقت بمدة 1000 مللي ثانية = 1 ثانية
        @Override
        public void actionPerformed(ActionEvent e) {
            // قراءة النص الحالي من OrderProcess
            String CurrentOrderProcess = OrderProcess.getText();
            // تحديث النص بإضافة القيمة الجديدة
            OrderProcess.setText(CurrentOrderProcess + Process);
            // إيقاف المؤقت بعد التنفيذ مرة واحدة
            ((Timer) e.getSource()).stop();
        }
    });
    timer.start(); // بدء المؤقت
    
}


private void ShowWaitingAndTurnAround_Time(String Algorithm){
     double totalWaitingTime = 0, totalTurnAroundTime = 0;
            for (int i = 0; i < rowCount; i++) {
                totalWaitingTime += Integer.parseInt(model.getValueAt(i, 4).toString());
                totalTurnAroundTime += Integer.parseInt(model.getValueAt(i, 5).toString());
            }

            double averageWaitingTime = totalWaitingTime / rowCount;
            double averageTurnAroundTime = totalTurnAroundTime / rowCount;

            // عرض المتوسطات
            JOptionPane.showMessageDialog(this, 
                "In "+Algorithm+" Average Waiting Time: " + averageWaitingTime + 
                "\nAverage Turnaround Time: " + averageTurnAroundTime, 
                "Results", JOptionPane.INFORMATION_MESSAGE);
}

private void setValueinTableWaitingTime(int waitingTimes[]){
         for (int i = 0; i < rowCount; i++) {
                model.setValueAt(waitingTimes[i], i, 4);
            }
}
private void setValueinTableTrunAroundTime(int turnAroundTimes[]){
         for (int i = 0; i < rowCount; i++) {
                model.setValueAt(turnAroundTimes[i], i, 5);
            }
}

private void Add_Two_ColumnWT(){
                    model.addColumn("Waiting Time ");
                    model.addColumn("TrunAround Time");
}
private void AssignValueLists(List<Object[]> tableData,int []waitingTimes,int []turnAroundTimes){
    for (int i = 0; i < tableData.size(); i++) {
        Object[] row = tableData.get(i);
       waitingTimes[i] =Integer.parseInt(row[4].toString()) ;
       turnAroundTimes[i] = Integer.parseInt(row[5].toString());
       
        
    }
}
private void UpdateModel(List<Object []> tableData ){
         for (int i = 0; i < tableData.size(); i++) {
        Object[] row = tableData.get(i);
        model.setValueAt(row[0], i, 0); // Process Number Update at Table
        model.setValueAt(row[1], i, 1); // Brust Time Update at Table
        model.setValueAt(row[2], i, 2); // Priority Process Update at Table
        model.setValueAt(row[3], i, 3);//  Qunam Time Update at Table
        model.setValueAt(row[4], i, 4);//  Waiting Time Update at Table
        model.setValueAt(row[5], i, 5);//  TrunAround Time Update At Table 
        
    }
}
private void AddinTwoCloumPQ(int columnNumber,String ColumnName){
//    if Entering Qaunam Time in Algorithm => Round Robin 
    if(columnNumber == 3){
         String PriorityInput = JOptionPane.showInputDialog(this, 
            "Input "+ColumnName+" Schaduling for process  :", 
            "Priority Schaduling Input", 
            JOptionPane.QUESTION_MESSAGE);

        // التحقق من صحة الإدخال
        if (PriorityInput == null || PriorityInput.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Quantum Time is required for each process!", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        try {
            int PriorityProcess = Integer.parseInt(PriorityInput);
            if (PriorityProcess <= 0) {
                
                throw new NumberFormatException("Quantum Time must be positive.");
            }
            // تحديث قيمة العمود في الجدول
            for (int i=0 ; i< model.getRowCount(); i++){
                            model.setValueAt(PriorityProcess, i, columnNumber);
            }
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Please enter a valid positive integer for Quantum Time.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
    }else{
          for (int i = 0; i < rowCount; i++) {
        String PriorityInput = JOptionPane.showInputDialog(this, 
            "Input "+ColumnName+" Schaduling for process " + (i + 1) + ":", 
            "Priority Schaduling Input", 
            JOptionPane.QUESTION_MESSAGE);

        // التحقق من صحة الإدخال
        if (PriorityInput == null || PriorityInput.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Quantum Time is required for each process!", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        try {
            int PriorityProcess = Integer.parseInt(PriorityInput);
            if (PriorityProcess <= 0) {
                throw new NumberFormatException("Quantum Time must be positive.");
            }
            // تحديث قيمة العمود في الجدول
            model.setValueAt(PriorityProcess, i, columnNumber);
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Please enter a valid positive integer for Quantum Time.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
    }
    }
    
   
}

private void IncreamentNumberProcess(){
     int nextProcessNumber = Integer.parseInt(processId.getText().toString());
        nextProcessNumber++;
        processId.setText(nextProcessNumber+"");
}
    public static void main(String args[]) {
       
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ProjectOperatingSystems.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ProjectOperatingSystems.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ProjectOperatingSystems.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ProjectOperatingSystems.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ProjectOperatingSystems().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> AlgorithmsList;
    private javax.swing.JTextField OrderProcess;
    private javax.swing.JTable Table;
    private javax.swing.JButton clear;
    private javax.swing.JTextField cpuTime;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton4;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextField processId;
    private javax.swing.JTextField stateofProcess;
    // End of variables declaration//GEN-END:variables
}
